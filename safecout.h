#pragma once
#ifndef SAFECOUT_H
#define SAFECOUT_H
#include <iostream>
#include <iomanip>
#include <functional>
#include <mutex>
#include <vector>
#include <condition_variable>
#include <locale>
#include <codecvt>

extern std::mutex mtxPrintF;
/**
 * Безопасно выводит форматированную строку в стандартный поток вывода.
 *
 * @param format Формат строки.
 * @param ... Переменное число аргументов для форматирования.
 *
 * Эта функция безопасно выводит форматированную строку в стандартный поток вывода (printf) с использованием мьютекса.
 * Мьютекс блокируется перед вызовом printf для гарантии безопасности вывода в многопоточной среде.
 * Функция принимает формат строки и переменное число аргументов для форматирования.
 *
 * Пример использования:
 * @code
 * safePrintf("Hello, %s!", "world");
 * @endcode
 *
 * В этом примере безопасно выводится форматированная строка "Hello, world!" в стандартный поток вывода.
 * Мьютекс блокируется перед вызовом printf, чтобы гарантировать безопасность вывода в многопоточной среде.
 */
void safePrintf(const char* format, ...);



extern std::mutex coutMutex;
/**
 * Класс SafeCout обеспечивает безопасный вывод в стандартный поток вывода (cout) с использованием мьютекса.
 *
 * Класс SafeCout предоставляет функциональность для безопасного вывода данных в стандартный поток вывода (cout) с использованием мьютекса.
 * Он перегружает оператор "<<" для различных типов данных, а также для строк и манипуляторов потока.
 * При использовании оператора "<<" объекта SafeCout, мьютекс блокируется, чтобы гарантировать безопасность вывода в многопоточной среде.
 *
 * Пример использования:
 * @code
 * SafeCout safeCout;
 * safeCout << "Hello, world!" << std::endl;
 * @endcode
 *
 * В этом примере создается объект класса SafeCout и используется оператор "<<" для безопасного вывода строки "Hello, world!" и символа новой строки.
 * Мьютекс блокируется во время вывода, чтобы гарантировать безопасность вывода в многопоточной среде.
 */
class SafeCout {
public:
    SafeCout(){};
    ~SafeCout(){};
    /**
     * Перегруженный оператор "<<" для вывода значения в стандартный поток вывода.
     *
     * @tparam T Тип значения для вывода.
     * @param value Значение для вывода.
     * @return Ссылка на объект SafeCout.
     *
     * Этот оператор перегружен для вывода значения заданного типа в стандартный поток вывода.
     * Мьютекс блокируется перед выводом, чтобы гарантировать безопасность вывода в многопоточной среде.
     * Возвращается ссылка на объект SafeCout для поддержки цепочки операторов.
     */
    template <typename T>
    SafeCout& operator<<(const T& value) {
        std::lock_guard<std::mutex> lock(coutMutex);
        std::cout << value;
        return *this;
    }

    /**
    * Перегруженный оператор "<<" для вывода строки в стандартный поток вывода.
    *
    * @param value Строка для вывода.
    * @return Ссылка на объект SafeCout.
    *
    * Этот оператор перегружен для вывода строки в стандартный поток вывода.
    * Мьютекс блокируется перед выводом, чтобы гарантировать безопасность вывода в многопоточной среде.
    * Возвращается ссылка на объект SafeCout для поддержки цепочки операторов.
    */
    SafeCout& operator<<(const std::string& value) {
        std::lock_guard<std::mutex> lock(coutMutex);
        std::cout << value;
        return *this;
    }

    /**
     * Перегруженный оператор "<<" для вывода манипулятора потока в стандартный поток вывода.
     *
     * @param manipulator Манипулятор потока для вывода.
     * @return Ссылка на объект SafeCout.
     *
     * Этот оператор перегружен для вывода манипулятора потока в стандартный поток вывода.
     * Мьютекс блокируется перед выводом, чтобы гарантировать безопасность вывода в многопоточной среде.
     * Возвращается ссылка на объект SafeCout для поддержки цепочки операторов.
     */
    SafeCout& operator<<(std::ostream& (*manipulator)(std::ostream&)) {
        std::lock_guard<std::mutex> lock(coutMutex);
        manipulator(std::cout);
        return *this;
    }

    void notifyAll() {
        std::lock_guard<std::mutex> lock(notifyMutex);
        notified = true;
        condVar.notify_all();
    }

    void wait() {
        std::unique_lock<std::mutex> lock(notifyMutex);
        condVar.wait(lock, [this] { return notified; });
        notified = false;
    }


private:
    std::mutex coutMutex;
    std::mutex notifyMutex;
    std::condition_variable condVar;
    bool notified = false;
};

/**
 * Создает таблицу и выводит ее в стандартный поток вывода с использованием объекта SafeCout.
 *
 * @param data Двумерный вектор данных для таблицы.
 * @param safeCout Объект SafeCout для безопасного вывода.
 *
 * Эта функция создает таблицу на основе переданных данных и выводит ее в стандартный поток вывода с использованием объекта SafeCout.
 * Для создания таблицы определяется максимальная ширина каждого столбца на основе данных.
 * Затем выводится верхняя граница таблицы, заголовки, разделитель столбцов и данные.
 * Наконец, выводится нижняя граница таблицы.
 *
 * Пример использования:
 * @code
 * std::vector<std::vector<std::string>> data = {{"Name", "Age", "City"}, {"John", "30", "New York"}, {"Alice", "25", "London"}};
 * SafeCout safeCout;
 * createTable(data, safeCout);
 * @endcode
 *
 * В этом примере создается двумерный вектор данных для таблицы и объект SafeCout для безопасного вывода.
 * Функция createTable используется для создания таблицы на основе данных и вывода ее в стандартный поток вывода.
 * Мьютекс блокируется во время вывода, чтобы гарантировать безопасность вывода в многопоточной среде.
 *
 * +-------+-----+---------+
 * | Name  | Age | City    |
 * +-------+-----+---------+
 * | John  | 30  | New York|
 * | Alice | 25  | London  |
 * +-------+-----+---------+
 *
 */
void createTable(const std::vector<std::vector<std::string>>& data, SafeCout& safeCout);

#endif // SAFECOUT_H