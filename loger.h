#pragma once
#ifndef LOGER_H
#define LOGER_H
#include <stdarg.h>
#include "libtcp.h"
#include <chrono>
#include <mutex>
#include <condition_variable>

/**
 * Макрос INIT() определяет имя программы.
 *
 * Макрос INIT() используется для получения имени программы из аргументов командной строки.
 * Он проверяет, содержит ли аргумент argv[0] полный путь к программе.
 * Если содержит, то возвращается имя программы без пути.
 * Если не содержит, то возвращается сам аргумент argv[0].
 */
#define INIT()			( program_name = \
                        strrchr( argv[ 0 ], '/' ) ) ? \
                        program_name++ : \
                        ( program_name = argv[ 0 ] )


/**
 * @brief Указатель на имя файла логов.
 */
extern const char* pNameFile;
/**
 * @brief Файловый дескриптор для логов.
 */
extern FILE *flog;

/**
 * @brief Перечисление типов логов.
 */
enum LogType {
    DEBUG,    ///< Отладочный лог.
    ERROR,    ///< Лог ошибки.
    INFO,     ///< Информационный лог.
    WARNING   ///< Лог предупреждения.
};


/**
 * @brief Выводит текущее время в формате "Дата ГГГГ-ММ-ДД Время ЧЧ:ММ:СС" в указанный файл.
 *
 * Функция получает текущее время и преобразует его в формат "Дата ГГГГ-ММ-ДД Время ЧЧ:ММ:СС".
 * Затем она выводит полученное время в указанный файл в указанном формате.
 *
 * @param fd Указатель на файл, в который будет выведено время.
 */
void print_time(FILE*);

/**
 * @brief Функция для логирования сообщений.
 *
 * Функция принимает уровень логирования, код ошибки, форматированное сообщение и дополнительные аргументы.
 * Она открывает файл логирования, выводит текущее время, уровень логирования, сообщение и код ошибки (если есть),
 * а затем закрывает файл.
 *
 * @param type Уровень логирования.
 * @param er Код ошибки.
 * @param msg Форматированное сообщение.
 * @param ... Дополнительные аргументы, переданные в переменную "ap".
 */
void loger(LogType , int , const char* ,...);



#endif // LOGER_H
